# this file defines the CI/CD stages for the TIDO viewer.
# in some cases they invoke scripts provided at .ci-scripts/ in order to
# keep this file slim and clear. please have a look at these scripts for
# information that goes beyond the documentation of the single stages.

stages:
  - build
  - test
  - deploy

#cache:
#  key: $CI_COMMIT_REF_SLUG
#  paths:
#    - node_modules/
#


# global cache settings for all jobs
# Ensure compatibility with the install job
# goal: the install job loads the cache and
# all other jobs can only use it
cache:
  # most npm libraries will only have 1 entry for the base project deps
  key: &global_cache_node_mods
    files:
      - package-lock.json
  paths:
    - node_modules/
  policy: pull  # prevent subsequent jobs from modifying cache


install:
  image: node:16
  stage: .pre   # always first, no matter if it is listed in stages
  cache:
    # store npm cache for all branches (stores download pkg.tar.gz's)
    # will not be necessary for any other job
    - key: ${CI_JOB_NAME}
      # must be inside $CI_PROJECT_DIR for gitlab-runner caching (#3)
      paths:
        - .npm/
      when: on_success
      policy: pull-push

    # Mimic &global_cache_node_mods config but override policy
    # to allow this job to update the cache at the end of the job
    # and only update if it was a successful job
    # NOTE: I would use yaml anchors here but overriding the policy
    # in a yaml list is not as easy as a dictionary entry (#5)
    - key:
        files:
          - package-lock.json
      paths:
        - node_modules/
      when: on_success
      policy: pull-push
  # before_script:
  #   - ...
  script:
    # define cache dir & use it npm!
    - npm ci --cache .npm --prefer-offline


build:
  image: node:16
  stage: build
  script:
    - npm run build
  artifacts:
    paths:
      - dist/
    expire_in: 1 mos

test:
  image: cypress/browsers:node16.13.2-chrome100-ff98
  # global cache settings are inherited to grab `node_modules`
  needs:
    # install job is not "needed" unless it creates artifacts
    # install job also occurs in the previous stage `.pre` so it
    # is implicitly required since `when: on_success` is the default
    # for subsequent jobs in subsequent stages
    - job: build
      artifacts: true      # grabs built files
  # dependencies: could also be used instead of needs
  script:
    - npm run serve:prod & npm run test:e2e
  artifacts:
    when: always
    paths:
      - tests/cypress/videos/**/*.mp4
      - tests/cypress/screenshots/**/*.png
    expire_in: 1 day

pages:
  image: alpine:latest
  stage: deploy
  when: always
  script:
    - sh .ci-scripts/install-deps.sh
    - bash .ci-scripts/update-artifacts.sh
  environment:
    name: $CI_COMMIT_REF_SLUG
    url: https://subugoe.pages.gwdg.de/emo/tido/${CI_COMMIT_REF_SLUG}/
    on_stop: stop_env
  artifacts:
    name: "$CI_COMMIT_SHORT_SHA"
    paths:
      - public

stop_env:
  stage: deploy
  script:
    - echo "Remove branch env"
  environment:
    name: $CI_COMMIT_REF_SLUG
    action: stop
